// Test for
// - Function declaration and return type checking
// - Function call argument type and count matching
// - Array argument dimension size checking
// - Variable name conflict with function
// - Implicit type conversions (int <-> double)

int add(int a, int b) {
    return a + b;
}

double multiply(double a, double b) {
    return a * b;
}

int sumOfArr(int arr[10]) {
    int i, sum = 0;
    for (i = 0; i < 10; i++) {
        sum = sum + arr[i];
    }
    return sum;
}

void printIntArray(int arr[10]) {
    int i;
    foreach (i : 0 .. 10) {
        print arr[i];
    }
    println "";
}

string errorTest() {
    return 20; // Error: return type is string, but returning int
}

void main() {
    int a = 5;
    int b = 10;
    double c = 2.5;
    double d = 4.0;

    // Function calls
    int sumInt;
    double sumDouble;

    sumInt = add(a, b);             // Valid call
    sumInt = add(a + b, c);         // Implicit conversion from double to int
    sumDouble = add(c, d);          // Implicit conversion: double to int, then result assigned to double

    // Multiplication
    double product;
    product = multiply(c, d);       // Valid call
    print "Product: ";
    println product;

    // Array declarations
    int arr[10];
    int darr[34][20][10];
    int warr[20][21];

    // Array parameter usage
    sumInt = sumOfArr(arr);         // Valid
    sumInt = sumOfArr(darr[2][0]);  // Valid: selecting a 1D int[10] array
    sumInt = sumOfArr(warr[0]);     // Error: passed int[21] instead of int[10]
    sumInt = errorTest();           // Error: assigning string to int

    // Function with array printing
    printIntArray(arr);             // Valid call

    int add;                        // Error: variable name conflicts with existing function name
}
