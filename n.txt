%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"

extern int   yylex(void);
extern FILE *yyin;
extern int   yylineno;

void yyerror(const char *s) {
    fprintf(stderr, "Syntax error at line %d: %s\n", yylineno, s);
    exit(1);
}
%}

%union {
  int    ival;
  double fval;
  char  *sval;
}

%token                LE GE EQ NEQ LT GT
%token                PLUS MINUS MUL DIV MOD ASSIGN NOT
%token                DOT COMMA COLON SEMICOLON
%token                LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE
%token                INC DEC AND OR
%token <ival>         INT          /* 123 */
%token <fval>         REAL         /* 3.14 */
%token <sval>         STRING_LIT   /* "abc" */
%token <sval>         ID           /* identifier */
%token                BOOL BREAK CASE CHAR CONST CONTINUE DEFAULT
%token                DO DOUBLE ELSE EXTERN FALSE FLOAT FOR FOREACH
%token                IF INT_TOK PRINT PRINTLN READ RETURN STRING_TOK
%token                SWITCH TRUE VOID WHILE

%left OR
%left AND
%nonassoc RELOP
%left '+' '-'
%left '*' '/' '%'
%right '!' UMINUS

%%

program:
    decl_list
;

decl_list:
      /* empty */
    | decl_list decl
;

decl:
      CONST type ID ASSIGN expression SEMICOLON
    | type id_list SEMICOLON
    | func_decl
;

type:
      BOOL       { /* semantic */ }
    | INT_TOK    { /* ... */ }
    | DOUBLE     { /* ... */ }
    | FLOAT      { /* ... */ }
    | STRING_TOK { /* ... */ }
;

id_list:
      ID                { /* build list */ }
    | id_list COMMA ID  { /* extend list */ }
;

func_decl:
      type ID LPAREN param_list RPAREN compound_stmt
    | VOID ID LPAREN param_list RPAREN compound_stmt
;

param_list:
      /* empty */
    | param_list_nonempty
;

param_list_nonempty:
      param
    | param_list_nonempty COMMA param
;

param:
      type ID
;

compound_stmt:
      LBRACE { /* start scope */ }
        stmt_list
      RBRACE { /* end scope */ }
;

stmt_list:
      /* empty */
    | stmt_list stmt
;

stmt:
      expression SEMICOLON
    | ID INC SEMICOLON
    | ID DEC SEMICOLON
    | IF LPAREN expression RPAREN stmt
    | IF LPAREN expression RPAREN stmt ELSE stmt
    | WHILE LPAREN expression RPAREN stmt
    | FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN stmt
    | FOREACH LPAREN ID ':' expression DOT DOT expression RPAREN stmt
    | RETURN expression SEMICOLON
    | PRINT expression SEMICOLON
    | PRINTLN expression SEMICOLON
    | READ ID SEMICOLON
    | compound_stmt
;

expression:
      INT
    | REAL
    | ID
    | expression '+' expression
    | expression '-' expression
    | expression '*' expression
    | expression '/' expression
    | expression '%' expression
    | expression RELOP expression
    | expression AND expression
    | expression OR expression
    | '-' expression      %prec UMINUS
    | '!' expression
    | LPAREN expression RPAREN
;

%%



int main(int argc,char *argv[])
{
    /* open the source program file */
    if (argc != 2) {
        printf ("Usage: sc filename\n");
        exit(1);
    }
    yyin = fopen(argv[1], "r");         /* open input file */

    /* perform parsing */
    if (yyparse() == 1)                 /* parsing */
        yyerror("Parsing error !");     /* syntax error */

    printf("\n");
    return 0;
}